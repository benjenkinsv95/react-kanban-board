{"version":3,"sources":["components/KanbanAppBar.js","lib/card-persistence.js","components/KanbanCard.js","components/KanbanList.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","menuButton","marginRight","spacing","title","KanbanAppBar","classes","className","AppBar","position","style","backgroundImage","Toolbar","Typography","variant","Link","color","href","Button","saveCards","name","newCards","localStorage","setItem","JSON","stringify","cards","KanbanCard","id","listTitle","text","setCards","leftCards","setLeftCards","rightCards","setRightCards","Card","CardHeader","action","onClick","filter","card","textAlign","marginTop","marginLeft","CardContent","paddingTop","paddingBottom","component","CardActions","Grid","container","item","xs","size","existingCard","find","KanbanList","titleBackgroundColor","useState","newItem","setNewItem","cardsJsx","map","key","width","backgroundColor","height","fontSize","boxShadow","zIndex","TextField","label","placeholder","margin","onChange","event","target","value","fullWidth","display","marginBottom","newCard","uuidv4","App","loadCards","defaultCards","json","getItem","console","log","parse","useCards","listName","setCardsPlain","cards2","setCards2","cards3","setCards3","cards4","setCards4","lg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mbASMA,G,MAAYC,aAAW,SAACC,GAAD,OACzBC,YAAa,CACTC,KAAM,CACFC,SAAU,GAEdC,WAAY,CACRC,YAAaL,EAAMM,QAAQ,IAE/BC,MAAO,CACHJ,SAAU,SAKP,SAASK,IACpB,IAAMC,EAAUX,IAEhB,OACI,yBAAKY,UAAWD,EAAQP,MACpB,kBAACS,EAAA,EAAD,CAAQC,SAAS,SAASC,MAAO,CAACC,gBAAiB,2BAC/C,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKP,UAAWD,EAAQF,OACvC,0BACD,kBAACW,EAAA,EAAD,CAAML,MAAO,CAACM,MAAO,WAAYC,KAAK,8BAAtC,gBAIJ,kBAACF,EAAA,EAAD,CAAML,MAAO,CAACM,MAAO,SAAUC,KAAK,oCAChC,kBAACC,EAAA,EAAD,CAAQF,MAAM,WAAU,uBAAGT,UAAU,mD,qBCrChDY,EAAY,SAACC,EAAMC,GAC5BC,aAAaC,QAAQH,EAAMI,KAAKC,UAAU,CAACC,MAAOL,M,sECkEvCM,G,MAvDI,SAAC,GAAuG,IAAtGC,EAAqG,EAArGA,GAAexB,GAAsF,EAAjGyB,UAAiG,EAAtFzB,OAAO0B,EAA+E,EAA/EA,KAAMJ,EAAyE,EAAzEA,MAAOK,EAAkE,EAAlEA,SAAUC,EAAwD,EAAxDA,UAAWC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,cAiBnG,OACI,kBAACC,EAAA,EAAD,CAAM7B,UAAU,QACZ,kBAAC8B,EAAA,EAAD,CACIC,OACI,kBAACzB,EAAA,EAAD,CAAY0B,QART,WACf,IAAMlB,EAAWK,EAAMc,QAAO,SAAAC,GAAI,OAAIA,EAAKb,KAAOA,KAClDG,EAASV,IAMoCL,MAAM,iBACnC,uBAAGT,UAAU,iBAAiBG,MAAO,CAACgC,UAAW,QAASxC,YAAa,EAAGyC,UAAW,IAArF,UAKRvC,MACI,kBAACS,EAAA,EAAD,CAAYG,MAAM,gBAAgBN,MAAO,CAACkC,WAAY,KACjDxC,KAIb,kBAACyC,EAAA,EAAD,CAAanC,MAAO,CAACoC,WAAY,EAAGC,cAAe,IAC/C,kBAAClC,EAAA,EAAD,CAAYC,QAAQ,QAAQkC,UAAU,KACjClB,IAGT,kBAACmB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAChD,QAAS,GACrB,kBAAC+C,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACRrB,GAAa,kBAACd,EAAA,EAAD,CAAQoC,KAAK,SAAQ,kBAAC,IAAD,CAAiBf,QAxCvD,WACb,IAAMgB,EAAe7B,EAAM8B,MAAK,SAAAf,GAAI,OAAIA,EAAKb,KAAOA,KAC9CP,EAAWK,EAAMc,QAAO,SAAAC,GAAI,OAAIA,EAAKb,KAAOA,KAClDG,EAASV,GACTY,EAAa,GAAD,mBAAKD,GAAL,CAAgBuB,UAsChB,kBAACL,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IAGf,kBAACH,EAAA,EAAD,CAAME,MAAI,EAACC,IAAE,GACRnB,GAAc,kBAAChB,EAAA,EAAD,CAAQoC,KAAK,SAAQ,kBAAC,IAAD,CAAkBf,QAxCxD,WACd,IAAMgB,EAAe7B,EAAM8B,MAAK,SAAAf,GAAI,OAAIA,EAAKb,KAAOA,KAC9CP,EAAWK,EAAMc,QAAO,SAAAC,GAAI,OAAIA,EAAKb,KAAOA,KAClDG,EAASV,GACTc,EAAc,GAAD,mBAAKD,GAAL,CAAiBqB,eCyEvBE,G,MAvFI,SAAC,GAAuG,IAAtGrC,EAAqG,EAArGA,KAAMsC,EAA+F,EAA/FA,qBAAsBhC,EAAyE,EAAzEA,MAAOK,EAAkE,EAAlEA,SAAUC,EAAwD,EAAxDA,UAAWC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,cAAmB,EACxFwB,mBAAS,IAD+E,mBAC/GC,EAD+G,KACtGC,EADsG,KAIhHC,EAAWpC,EAAMqC,KAAI,gBAAE3D,EAAF,EAAEA,MAAOwB,EAAT,EAASA,GAAIE,EAAb,EAAaA,KAAb,OACvB,kBAAC,EAAD,CACIF,GAAIA,EACJoC,IAAKpC,EACLxB,MAAOA,EACP0B,KAAMA,EACNJ,MAAOA,EACPK,SAAUA,EACVC,UAAWA,EACXC,aAAcA,EACdC,WAAYA,EACZC,cAAeA,OAmBvB,OACI,yBAAK5B,UAAU,cAAcG,MAAO,CAACuD,MAAO,SACxC,yBAAKvD,MAAO,CAACqC,cAAe,EAAGmB,gBAAiB,UAC5C,yBAAKxD,MAAO,CACRwD,gBAAiBR,EACjBS,OAAQ,GACRnD,MAAO,QACPoD,SAAU,GACV1B,UAAW,SACX2B,UAAW,iHACXC,OAAQ,OAEPlD,IAGR0C,EAED,yBAAKpD,MAAO,CAACwD,gBAAiB,UAC1B,yBAAKxD,MAAO,CAACkC,WAAY,EAAG1C,YAAa,IACrC,kBAACqE,EAAA,EAAD,CACI3C,GAAG,4BACH4C,MAAM,WACNC,YAAY,iBACZC,OAAO,SACPC,SA5BC,SAAAC,GACjBf,EAAWe,EAAMC,OAAOC,QA4BRA,MAAOlB,EACPmB,WAAS,KAIjB,yBAAKrE,MAAO,CAACsE,QAAS,SAClB,kBAAC9D,EAAA,EAAD,CACIR,MAAO,CACHkC,WAAY,OACZ1C,YAAa,EACb+E,aAAc,EACdf,gBAAiBR,EACjB1C,MAAO,SAEXuB,QAnDA,WAChB,IAAM2C,EAAU,CAACtD,GAAIuD,MAAU/E,MAAOwD,GAChCvC,EAAQ,sBAAOK,GAAP,CAAcwD,IAC5BnD,EAASV,GACTF,EAAUC,EAAMC,GAChBwC,EAAW,KA+CK/C,QAAQ,YACRwC,KAAK,UAVT,YCiBL8B,MAjFf,WACI,IAIMC,EAAY,SAACjE,GACf,IAAMkE,EAAe,CACjB,CAAC1D,GAAIuD,MAAU/E,MAAO,qBAAsB0B,KAAM,qDAClD,CAACF,GAAIuD,MAAU/E,MAAO,uBAAwB0B,KAAM,sDAGlDyD,EAAOjE,aAAakE,QAAQpE,IAASI,KAAKC,UAAU,CAACC,MAAO4D,IAElE,OADAG,QAAQC,IAAIH,GACL/D,KAAKmE,MAAMJ,GAAM7D,OAGtBkE,EAAW,SAAAC,GAAa,IAAD,EACMlC,mBAAS0B,EAAUQ,IADzB,mBAClBnE,EADkB,KACXoE,EADW,KAMzB,MAAO,CAACpE,EAJS,SAAAL,GACbyE,EAAczE,GACdF,EAAU0E,EAAUxE,MApBjB,EAyBeuE,EAASP,EAxBlB,SADN,mBAyBJ3D,EAzBI,KAyBGK,EAzBH,OA0BiB6D,EAASP,EAxBnB,UAFP,mBA0BJU,EA1BI,KA0BIC,EA1BJ,OA2BiBJ,EAASP,EAxBnB,cAHP,mBA2BJY,EA3BI,KA2BIC,EA3BJ,OA4BiBN,EAASP,EAxBnB,SAJP,mBA4BJc,EA5BI,KA4BIC,EA5BJ,KA+BX,OACI,kBAAC,WAAD,KACI,kBAAC,EAAD,MAEA,yBAAK7F,UAAU,UACX,kBAAC2C,EAAA,EAAD,CAAMC,WAAS,EAAChD,QAAS,GACrB,kBAAC+C,EAAA,EAAD,CAAME,MAAI,EAACiD,GAAI,GACX,kBAAC,EAAD,CACIjF,KAtCP,OAuCOsC,qBAAqB,UACrBhC,MAAOA,EAAOK,SAAUA,EACxBG,WAAY6D,EAAQ5D,cAAe6D,KAI3C,kBAAC9C,EAAA,EAAD,CAAME,MAAI,EAACiD,GAAI,GACX,kBAAC,EAAD,CACIjF,KA9CN,QA+CMsC,qBAAqB,UACrBhC,MAAOqE,EAAQhE,SAAUiE,EACzB9D,WAAY+D,EAAQ9D,cAAe+D,EACnClE,UAAWN,EAAOO,aAAcF,KAIxC,kBAACmB,EAAA,EAAD,CAAME,MAAI,EAACiD,GAAI,GACX,kBAAC,EAAD,CACIjF,KAvDN,YAwDMsC,qBAAqB,UACrBhC,MAAOuE,EAAQlE,SAAUmE,EACzBhE,WAAYiE,EAAQhE,cAAeiE,EACnCpE,UAAW+D,EAAQ9D,aAAc+D,KAIzC,kBAAC9C,EAAA,EAAD,CAAME,MAAI,EAACiD,GAAI,GACX,kBAAC,EAAD,CACIjF,KAhEN,OAiEMsC,qBAAqB,UACrBhC,MAAOyE,EAAQpE,SAAUqE,EACzBpE,UAAWiE,EAAQhE,aAAciE,SCrEzCI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.01772b46.chunk.js","sourcesContent":["import AppBar from '@material-ui/core/AppBar'\nimport Button from '@material-ui/core/Button'\nimport Link from '@material-ui/core/Link'\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport React from 'react'\nimport './KanbanAppBar.css'\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1\n        },\n        menuButton: {\n            marginRight: theme.spacing(2)\n        },\n        title: {\n            flexGrow: 1\n        }\n    })\n)\n\nexport default function KanbanAppBar() {\n    const classes = useStyles()\n\n    return (\n        <div className={classes.root}>\n            <AppBar position=\"static\" style={{backgroundImage: 'url(\\'/background.png\\')'}}>\n                <Toolbar>\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {'Simple Kanban Board by '}\n                        <Link style={{color: '#e8741e'}} href='http://www.ben-jenkins.com'>\n                            Ben Jenkins\n                        </Link>\n                    </Typography>\n                    <Link style={{color: 'white'}} href='https://github.com/benjenkinsv95'>\n                        <Button color=\"inherit\"><i className=\"devicon-github-plain-wordmark navbar-icon\"/></Button>\n                    </Link>\n                </Toolbar>\n            </AppBar>\n        </div>\n    )\n}","export const saveCards = (name, newCards) => {\n    localStorage.setItem(name, JSON.stringify({cards: newCards}))\n}","import {Card} from '@material-ui/core'\nimport Button from '@material-ui/core/Button'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardHeader from '@material-ui/core/CardHeader'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport React from 'react'\nimport './KanbanCard.css'\n\nconst KanbanCard = ({id, listTitle, title, text, cards, setCards, leftCards, setLeftCards, rightCards, setRightCards}) => {\n    const moveLeft = () => {\n        const existingCard = cards.find(card => card.id === id)\n        const newCards = cards.filter(card => card.id !== id)\n        setCards(newCards)\n        setLeftCards([...leftCards, existingCard])\n    }\n    const moveRight = () => {\n        const existingCard = cards.find(card => card.id === id)\n        const newCards = cards.filter(card => card.id !== id)\n        setCards(newCards)\n        setRightCards([...rightCards, existingCard])\n    }\n    const removeCard = () => {\n        const newCards = cards.filter(card => card.id !== id)\n        setCards(newCards)\n    }\n    return (\n        <Card className='card'>\n            <CardHeader\n                action={\n                    <Typography onClick={removeCard} color=\"textSecondary\">\n                        <i className=\"material-icons\" style={{textAlign: 'right', marginRight: 8, marginTop: 8}}>\n                            close\n                        </i>\n                    </Typography>\n                }\n                title={\n                    <Typography color=\"textSecondary\" style={{marginLeft: 24}}>\n                        {title}\n                    </Typography>\n                }\n            />\n            <CardContent style={{paddingTop: 0, paddingBottom: 0}}>\n                <Typography variant=\"body2\" component=\"p\">\n                    {text}\n                </Typography>\n            </CardContent>\n            <CardActions>\n                <Grid container spacing={1}>\n                    <Grid item xs>\n                        {leftCards && <Button size=\"small\"><ChevronLeftIcon onClick={moveLeft}/></Button>}\n                    </Grid>\n                    <Grid item xs={6}>\n\n                    </Grid>\n                    <Grid item xs>\n                        {rightCards && <Button size=\"small\"><ChevronRightIcon onClick={moveRight}/></Button>}\n                    </Grid>\n                </Grid>\n            </CardActions>\n        </Card>\n    )\n}\n\nexport default KanbanCard\n","import Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport React, {useState} from 'react'\n\nimport uuidv4 from 'uuid/v4'\nimport {saveCards} from '../lib/card-persistence'\nimport KanbanCard from './KanbanCard'\nimport './KanbanList.css'\n\nconst KanbanList = ({name, titleBackgroundColor, cards, setCards, leftCards, setLeftCards, rightCards, setRightCards}) => {\n    const [newItem, setNewItem] = useState('')\n\n\n    const cardsJsx = cards.map(({title, id, text}) => (\n        <KanbanCard\n            id={id}\n            key={id}\n            title={title}\n            text={text}\n            cards={cards}\n            setCards={setCards}\n            leftCards={leftCards}\n            setLeftCards={setLeftCards}\n            rightCards={rightCards}\n            setRightCards={setRightCards}\n\n        />\n    ))\n    // const cardsJsx = cards.map(({title, id}) => (\n    //     <div key={id}>{title}</div>\n    // ))\n    const handleClick = () => {\n        const newCard = {id: uuidv4(), title: newItem}\n        const newCards = [...cards, newCard]\n        setCards(newCards)\n        saveCards(name, newCards)\n        setNewItem('')\n    }\n\n    const handleChange = event => {\n        setNewItem(event.target.value)\n    }\n\n    return (\n        <div className='kanban-list' style={{width: '100%'}}>\n            <div style={{paddingBottom: 8, backgroundColor: 'white'}}>\n                <div style={{\n                    backgroundColor: titleBackgroundColor,\n                    height: 50,\n                    color: 'white',\n                    fontSize: 40,\n                    textAlign: 'center',\n                    boxShadow: '0px 4px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12)',\n                    zIndex: 1100\n                }}>\n                    {name}\n                </div>\n            </div>\n            {cardsJsx}\n\n            <div style={{backgroundColor: 'white'}}>\n                <div style={{marginLeft: 8, marginRight: 8}}>\n                    <TextField\n                        id=\"standard-with-placeholder\"\n                        label=\"New Card\"\n                        placeholder=\"Enter new card\"\n                        margin=\"normal\"\n                        onChange={handleChange}\n                        value={newItem}\n                        fullWidth\n                    />\n                </div>\n\n                <div style={{display: 'flex'}}>\n                    <Button\n                        style={{\n                            marginLeft: 'auto',\n                            marginRight: 8,\n                            marginBottom: 8,\n                            backgroundColor: titleBackgroundColor,\n                            color: 'white'\n                        }}\n                        onClick={handleClick}\n                        variant=\"contained\"\n                        size=\"medium\"\n                    >\n                        Add\n                    </Button>\n                </div>\n            </div>\n\n\n        </div>\n    )\n}\n\nexport default KanbanList\n","import Grid from '@material-ui/core/Grid'\nimport React, {Fragment, useState} from 'react'\nimport 'typeface-roboto'\n\nimport uuidv4 from 'uuid/v4'\nimport './App.css'\nimport KanbanAppBar from './components/KanbanAppBar'\nimport KanbanList from './components/KanbanList'\nimport {saveCards} from './lib/card-persistence'\n\nfunction App() {\n    const listName = 'Todo'\n    const listName2 = 'Doing'\n    const listName3 = 'Reviewing'\n    const listName4 = 'Done'\n    const loadCards = (name) => {\n        const defaultCards = [\n            {id: uuidv4(), title: 'An amazing feature', text: 'This feature is super amazing because of reasons.'},\n            {id: uuidv4(), title: 'Very important stuff', text: 'This feature is super amazing because of reasons.'}\n        ]\n\n        const json = localStorage.getItem(name) || JSON.stringify({cards: defaultCards})\n        console.log(json)\n        return JSON.parse(json).cards\n    }\n\n    const useCards = listName => {\n        const [cards, setCardsPlain] = useState(loadCards(listName))\n        const setCards = newCards => {\n            setCardsPlain(newCards)\n            saveCards(listName, newCards)\n        }\n        return [cards, setCards]\n    }\n\n    const [cards, setCards] = useCards(loadCards(listName))\n    const [cards2, setCards2] = useCards(loadCards(listName2))\n    const [cards3, setCards3] = useCards(loadCards(listName3))\n    const [cards4, setCards4] = useCards(loadCards(listName4))\n\n    // #8e6e95 #39a59c #344759 #e8741e\n    return (\n        <Fragment>\n            <KanbanAppBar/>\n\n            <div className='kanban'>\n                <Grid container spacing={3}>\n                    <Grid item lg={3}>\n                        <KanbanList\n                            name={listName}\n                            titleBackgroundColor=\"#8e6e95\"\n                            cards={cards} setCards={setCards}\n                            rightCards={cards2} setRightCards={setCards2}\n\n                        />\n                    </Grid>\n                    <Grid item lg={3}>\n                        <KanbanList\n                            name={listName2}\n                            titleBackgroundColor=\"#39a59c\"\n                            cards={cards2} setCards={setCards2}\n                            rightCards={cards3} setRightCards={setCards3}\n                            leftCards={cards} setLeftCards={setCards}\n\n                        />\n                    </Grid>\n                    <Grid item lg={3}>\n                        <KanbanList\n                            name={listName3}\n                            titleBackgroundColor=\"#344759\"\n                            cards={cards3} setCards={setCards3}\n                            rightCards={cards4} setRightCards={setCards4}\n                            leftCards={cards2} setLeftCards={setCards2}\n\n                        />\n                    </Grid>\n                    <Grid item lg={3}>\n                        <KanbanList\n                            name={listName4}\n                            titleBackgroundColor=\"#e8741e\"\n                            cards={cards4} setCards={setCards4}\n                            leftCards={cards3} setLeftCards={setCards3}\n\n                        />\n                    </Grid>\n                </Grid>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}